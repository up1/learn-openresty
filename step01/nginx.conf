worker_processes  auto;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    resolver local=on ipv6=off;
    # resolver_timeout 5s;
    # resolver system;

    lua_package_path "/usr/local/openresty/luajit/lua-resty-redis/lib/?.lua;;";
    server {
        listen 8080;
        location / {
            default_type text/html;
            content_by_lua_block {
                local name = ngx.var.arg_name or "Somkiat.cc"
                ngx.say("Hello, ", name, "!")
            }
        }
        location /redis {
            default_type text/html;
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeouts(1000, 1000, 1000)

                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                
                local key = ngx.var.arg_key or "default_key"
                local value = ngx.var.arg_value or "default_value"
                ok, err = red:set(key, value)
                if not ok then
                    ngx.say("Failed to set key: ", err)
                    return
                end

                ngx.say("Set result: ", ok)

                local ok, err = red:set_keepalive(1000, 100)
                if not ok then
                    ngx.say("Failed to set keepalive: ", err)
                    return
                end
            }
        }
    }
}